import { Log, PeprRequest, a } from "pepr";
import { readFileSync } from 'fs';
import './wasm_exec.js';



export class TransformerAPI {
  private go: any; // untyped autogenerated :(
  private module: WebAssembly.Module;
  private instance: WebAssembly.Instance;


  transform(pod: string, request: string, imagePullSecretName: string, targetHost: string): string {
    if (!this.instance) {
      throw new Error('WebAssembly module not instantiated yet.');
    }

    // // const exports = this.instance.exports as any;
    // // console.log(this.instance.exports)

    // if (!exports.podTransform) {
    //   Log.info('WebAssembly module does not export podTransform.');
    // }

    //return podTransform(pod, request, imagePullSecretName, targetHost);
    return zarfTransform.podTransform(pod, request, imagePullSecretName, targetHost);

  }
  private async compileWebAssembly(): Promise<void> {
    const wasmCode = readFileSync('capabilities/main.wasm');
    this.module = await WebAssembly.compile(wasmCode);
  }

  private async instantiateWebAssembly(): Promise<void> {
    let bytesBuffer = readFileSync("capabilities/main.wasm")

    //this.instance = await WebAssembly.instantiate(this.module,this.go.importObject)
    // let result = await WebAssembly.instantiate(readFileSync("capabilities/main.wasm"),this.go.importObject)
    return WebAssembly.instantiate(bytesBuffer, this.go.importObject).then(wasmModule => {
      // Exported function live under instance.exports
      console.log(JSON.stringify(wasmModule))
      //const { podTransform } = wasmModule.instance.exports;
     let obj = this.go.run(wasmModule.instance);
     console.log(JSON.stringify(obj))
     this.instance = obj;
     console.log(zarfTransform)
      // const sum = add(5, 6);
      // console.log(sum); // Outputs: 11
    });

    // this.instance = this.go.run(result);
  }



  public async run(): Promise<void> {
    this.go = new globalThis.Go();
    try {
      await this.compileWebAssembly();
    } catch (err) {
      Log.error("Error compiling wasm file", err.toString());
      return
    }
    try {
      await this.instantiateWebAssembly()
    } catch (err) {
      Log.error("Error instantiating wasm module", err.toString());
      return
    }

  }



  transformPod(pod: any, request: any, imagePullSecretName: string, targetHost: string): string {
    let transformedPod: string;
    if (!this.instance) {
      throw new Error('WebAssembly module not loaded or initialized.');
    }

    try {
      transformedPod = this.transform(JSON.stringify(pod), JSON.stringify(request), imagePullSecretName, targetHost);

    } catch (err) {
      Log.error("Error calling imageTransformHost", err);
    }

    return transformedPod;

  }
}
