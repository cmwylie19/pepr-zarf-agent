// package main

// import (
// 	"syscall/js"
// )

// func add(this js.Value, args []js.Value) interface{} {
// 	if len(args) != 2 {
// 		return nil
// 	}
// 	return args[0].Int() + args[1].Int()
// }

// func main() {
// 	js.Global().Set("add", js.FuncOf(add))
// 	select {}
// }

//go:build js && wasm

package main

import (
	"encoding/json"
	"fmt"
	"syscall/js"

	"github.com/defenseunicorns/zarf/src/pkg/transform"
	admission "k8s.io/api/admission/v1"
)

// WASMRequest will be create in Pepr Admission Controller
type WASMRequest[T any] struct {
	Request *admission.AdmissionReview `json:"request,omitempty" protobuf:"bytes,1,opt,name=request"`
	// Kubernetes Resource
	Resource T
	// Function Arguments
	Args []interface{}
}

type WASMResponse[T any, V any] struct {
	Resource T
	Data     V
}

// func ImageTransformHost[T any](wasmRequest *WASMRequest[T]) *WASMResponse[T, string] {

// 	targetHost := fmt.Sprintf("%v", wasmRequest.Args[0])
// 	srcReference := fmt.Sprintf("%v", wasmRequest.Args[1])
// 	transformedImage, _ := transform.ImageTransformHost(targetHost, srcReference)

// 	return &WASMResponse[T, string]{
// 		Resource: wasmRequest.Resource,
// 		Data:     transformedImage,
// 	}
// }

func ImageTransformHostWrapper(this js.Value, args []js.Value) interface{} {

	if len(args) != 1 {
		fmt.Errorf("expected one argument")
		return nil
	}

	var wasmRequest WASMRequest

	// Convert js.Value to []byte
	bytes := []byte(value.String())

	// Unmarshal the JSON into the WASMRequest struct
	err := json.Unmarshal(bytes, &wasmRequest)
	if err != nil {
		fmt.Errorf("could not unmarshall argument to WASMRequest ", err)
		return WASMRequest{}, err
	}

	if len(args) != 2 {
		fmt.Errorf("expepted targetHost and srcReference in WASMRequest")
		return nil
	}

	targetHost := wasmRequest.Args[0]
	srcReference := wasmRequest.Args[1]
	transformedImage, _ := transform.ImageTransformHost(targetHost, srcReference)
	return transformedImage
}

func main() {
	c := make(chan bool)
	// ./main.go:65:54: cannot use ImageTransformHost[any] (value of type func(wasmRequest *WASMRequest[any]) *WASMResponse[any, string]) as func(this js.Value, args []js.Value) any value in argument to js.FuncOf
	// https://pkg.go.dev/syscall/js#FuncOf
	js.Global().Set("ImageTransformHostWrapper", js.FuncOf(ImageTransformHostWrapper))
	<-c
}
