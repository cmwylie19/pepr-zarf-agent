// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: api/v1/image/image.proto

package image

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageTransformClient is the client API for ImageTransform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageTransformClient interface {
	ImageTransformHost(ctx context.Context, in *TransformRequest, opts ...grpc.CallOption) (*TransformResponse, error)
	ImageTransformHostWithoutChecksum(ctx context.Context, in *TransformRequest, opts ...grpc.CallOption) (*TransformResponse, error)
}

type imageTransformClient struct {
	cc grpc.ClientConnInterface
}

func NewImageTransformClient(cc grpc.ClientConnInterface) ImageTransformClient {
	return &imageTransformClient{cc}
}

func (c *imageTransformClient) ImageTransformHost(ctx context.Context, in *TransformRequest, opts ...grpc.CallOption) (*TransformResponse, error) {
	out := new(TransformResponse)
	err := c.cc.Invoke(ctx, "/image.defenseunicorns.com.ImageTransform/ImageTransformHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageTransformClient) ImageTransformHostWithoutChecksum(ctx context.Context, in *TransformRequest, opts ...grpc.CallOption) (*TransformResponse, error) {
	out := new(TransformResponse)
	err := c.cc.Invoke(ctx, "/image.defenseunicorns.com.ImageTransform/ImageTransformHostWithoutChecksum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageTransformServer is the server API for ImageTransform service.
// All implementations must embed UnimplementedImageTransformServer
// for forward compatibility
type ImageTransformServer interface {
	ImageTransformHost(context.Context, *TransformRequest) (*TransformResponse, error)
	ImageTransformHostWithoutChecksum(context.Context, *TransformRequest) (*TransformResponse, error)
	mustEmbedUnimplementedImageTransformServer()
}

// UnimplementedImageTransformServer must be embedded to have forward compatible implementations.
type UnimplementedImageTransformServer struct {
}

func (UnimplementedImageTransformServer) ImageTransformHost(context.Context, *TransformRequest) (*TransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageTransformHost not implemented")
}
func (UnimplementedImageTransformServer) ImageTransformHostWithoutChecksum(context.Context, *TransformRequest) (*TransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageTransformHostWithoutChecksum not implemented")
}
func (UnimplementedImageTransformServer) mustEmbedUnimplementedImageTransformServer() {}

// UnsafeImageTransformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageTransformServer will
// result in compilation errors.
type UnsafeImageTransformServer interface {
	mustEmbedUnimplementedImageTransformServer()
}

func RegisterImageTransformServer(s grpc.ServiceRegistrar, srv ImageTransformServer) {
	s.RegisterService(&ImageTransform_ServiceDesc, srv)
}

func _ImageTransform_ImageTransformHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageTransformServer).ImageTransformHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.defenseunicorns.com.ImageTransform/ImageTransformHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageTransformServer).ImageTransformHost(ctx, req.(*TransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageTransform_ImageTransformHostWithoutChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageTransformServer).ImageTransformHostWithoutChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.defenseunicorns.com.ImageTransform/ImageTransformHostWithoutChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageTransformServer).ImageTransformHostWithoutChecksum(ctx, req.(*TransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageTransform_ServiceDesc is the grpc.ServiceDesc for ImageTransform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageTransform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image.defenseunicorns.com.ImageTransform",
	HandlerType: (*ImageTransformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImageTransformHost",
			Handler:    _ImageTransform_ImageTransformHost_Handler,
		},
		{
			MethodName: "ImageTransformHostWithoutChecksum",
			Handler:    _ImageTransform_ImageTransformHostWithoutChecksum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/image/image.proto",
}
